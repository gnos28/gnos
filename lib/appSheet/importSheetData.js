"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importSheetData = void 0;
const google_spreadsheet_1 = require("google-spreadsheet");
const importSheetData = async (sheetId, tabId, headerRowIndex) => {
    console.log("*** importSheetData ðŸ‘Ž");
    // be be replaced by auth.json data
    const { GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY } = process.env;
    // let rawdatas = fs.readFileSync("jobseasons-oauth.json", "utf8");
    // let datas = JSON.parse(rawdatas);
    if (GOOGLE_SERVICE_ACCOUNT_EMAIL && GOOGLE_PRIVATE_KEY && sheetId && tabId) {
        const doc = new google_spreadsheet_1.GoogleSpreadsheet(sheetId);
        await doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: GOOGLE_SERVICE_ACCOUNT_EMAIL,
            private_key: GOOGLE_PRIVATE_KEY,
        });
        await doc.loadInfo(); // loads document properties and worksheets
        const sheet = doc.sheetsById[tabId];
        if (headerRowIndex)
            sheet.loadHeaderRow(headerRowIndex);
        const rows = await sheet.getRows();
        const { headerValues } = sheet;
        const datas = rows.map((row) => {
            const newObj = {};
            headerValues.forEach((header) => (newObj[header] = row[header]));
            return Object.assign(Object.assign({}, newObj), { rowIndex: row.rowIndex, a1Range: row.a1Range });
        });
        return datas;
    }
    return [];
};
exports.importSheetData = importSheetData;
