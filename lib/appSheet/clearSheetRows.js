"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearTabData = exports.clearSheetRows = void 0;
const google_spreadsheet_1 = require("google-spreadsheet");
const clearSheetRows = async (sheetId, tabId, headerRowIndex) => {
    console.log("clearSheetRows");
    // be be replaced by auth.json data
    const { GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY } = process.env;
    if (GOOGLE_SERVICE_ACCOUNT_EMAIL && GOOGLE_PRIVATE_KEY) {
        const doc = new google_spreadsheet_1.GoogleSpreadsheet(sheetId);
        await doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: GOOGLE_SERVICE_ACCOUNT_EMAIL,
            private_key: GOOGLE_PRIVATE_KEY,
        });
        await doc.loadInfo(); // loads document properties and worksheets
        const sheet = doc.sheetsById[tabId];
        if (headerRowIndex)
            await sheet.loadHeaderRow(headerRowIndex);
        await sheet.clearRows();
    }
};
exports.clearSheetRows = clearSheetRows;
const clearTabData = async (sheetId, tabList, tabName, headerRowIndex) => {
    var _a;
    const tabId = (_a = tabList.filter((tab) => tab.sheetName === tabName)[0]) === null || _a === void 0 ? void 0 : _a.sheetId;
    if (tabId === undefined)
        throw new Error(`tab ${tabName} not found`);
    return await (0, exports.clearSheetRows)(sheetId, tabId, headerRowIndex);
};
exports.clearTabData = clearTabData;
